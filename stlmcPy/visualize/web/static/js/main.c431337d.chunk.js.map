{"version":3,"sources":["Component/LinePlot/style/LinePlotStyle.scss","Component/Core/Util/Layout.tsx","Component/Core/Renderer/ModeRenderer.js","Component/Core/Renderer/MainRenderer.js","Component/Core/Renderer/PropositionRenderer.js","Component/Core/Util/DataParser.tsx","Component/LinePlot/LinePlot.tsx","App.tsx","serviceWorker.ts","index.tsx","Component/LinePlot/style/variable.module.scss"],"names":["module","exports","width","height","width_viewer","height_viewer","width_controller","height_controller","margin_viewer_top","margin_viewer_right","margin_viewer_bottom","margin_viewer_left","margin_controller_top","margin_controller_right","margin_controller_bottom","margin_controller_left","margin","top","arguments","length","undefined","right","bottom","left","Object","classCallCheck","this","size","PropData","range","interval_range","ModeRenderer","_size","_margin_viewer","_index","_jd","axis_delta","x_clip_margin","data_viewer_height","_tag","d3","selectAll","remove","maxX","data","xrange","yrange","type","min","max","dataXrange","sim","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","elem","value","includes","push","err","return","canvas","append","attr","modeCanvas","XscaleError","YscaleError","Xscale","domain","Yscale","scaleX","scaleY","modeCanvasIntervalLines","call","tickValues","tickSize","tickPadding","tickFormat","select","modeCanvasXaxis","modeCanvasYaxis","ticks","d","map","e","parseInt","i","parseFloat","modeGraph","enter","modeLineGenerator","x","y","curve","modeLineG","Renderer","maxY","l","xdata","pdata","vardict","modeSize","subXscale","subYscale","_this","refData","t1","fps","t0","Date","now","text","Math","round","graphCanvas","graphCanvasFront","colorScale","dataYrange","dataCanvasXscale","dataCanvasYscale","dataCanvasXscaleZoom","dataCanvasYscaleZoom","graphCanvasXaxisGrid","graphCanvasYaxisGrid","graphCanvasXaxis","graphCanvasYaxis","zoom","extent","scaleExtent","Infinity","translateExtent","on","transform","rescaleX","rescaleY","propCanvasYscale","lineGenerator","lineGenerator2","_loop","lineG","lineGraph","each","newX","tooltip","style","drawGraph","_this2","color","newDataList","nameList","_ref3","_ref2","slicedToArray","k","name","infoHeight","InfoCanvas","bisectDate","popup","mouse","$","pos","invert","bisectPos","_graph","graph","PropositionRenderer","propCanvas","propCanvasIntervalLines","propCanvasXaxis","propCanvasYaxis","propGraph","propLineGenerator","propLineG","Json","_jsonString","_intervalsMap","Map","_intervalVarMap","_dataByNameMap","_xRangeMap","_yRangeMap","_graph_size","minX","totalMaxX","totalMinX","_isEmpty","_var_list","_x_data_list","_interval_flat_list","_interval_info","_propMap","_modeMap","parse","clearAll","_Object$values","values","_Object$values2","variable","interval","dataByName","prop","mode","intervalInfo","full_interval_range","_i","_Object$entries","entries","_ref13","ovalue","_Object$values17","_Object$values18","interval_index","interval_data","tmp","intIndex","set","counter_mode","_Object$entries2","_i2","_ref4","_Object$values19","_Object$values20","mode_name","mode_type","mode_data","intv_data_set","_loop3","ii2","numnumlist","iifg","get","yy","tmp_mode","actual","originalData","counter","_loop2","_ref5","_Object$entries3","_i3","_ref6","_Object$values21","_Object$values22","prop_name","prop_actual","prop_data","_loop4","tmp_prop","s","_Object$values3","_Object$values4","index","varList","_i4","_Object$entries4","_ref9","_ref8","v","_Object$values7","_Object$values8","points","intIndexInt","intervals","tmp_interval","IsInList","pv","_Object$values9","_Object$values10","getFromGraph","_Object$values5","_Object$values6","minY","_Object$values11","_Object$values12","_i6","_Object$entries5","_ref12","_ref11","_Object$values13","_Object$values14","tmp_data","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_Object$values15","_Object$values16","res","intv","intvElem","newI","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","clear","jsonString","LinePlot","props","possibleConstructorReturn","getPrototypeOf","styleVariable","replace","renderers","propRenderers","modeRenderers","instance","njson","base_margin","state","isCounterExm","selectedValue","isOptionAlive","graphNum","model","propState","isEnabled","numOfGraph","propMap","propData","modeState","modeMap","toggle","isToggleChanged","xlist","serverError","message","error","isShutDown","isLoadingReset","onModelListSelect","bind","assertThisInitialized","onResetButtonClick","onOffButtonClick","Axios","create","baseURL","url","Item","ItemList","Main","ShutDown","LoadingBtn","catch","console","log","setState","then","response","file_list","title","uid","prevProps","prevState","snapshot","isEmpty","modeRenderersXScale","modeRenderersYScale","GetModeSize","GetMode","loadGraph","TotalMinX","TotalMaxX","GetIntervalInfoFlat","getXscale","getYscale","eGraph","GetDataByName","xRange","yRange","variables","propSize","GetProp","value2","actionMeta","titleVal","ws","find","string","gs","GetGraphSize","isRedBool","window","newSize","red","GetGraph","isBoolean","modeIsBoolean","md","_this3","vars","GetVar","label","react_default","a","createElement","marginLeft","marginRight","Form","Row","Check","checked","onClick","newIsEnabled","id","display","_this4","className","_this5","mod","isBool","newIs","res2","res3","PropUI","ModeUI","role","Modal","show","aria-labelledby","centered","keyboard","backdrop","Header","Title","Body","Spinner","as","animation","aria-hidden","selected","Button","variant","react_select_browser_esm","isSearchable","options","onChange","React","Component","App","option","require","Component_LinePlot_LinePlot","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c431337d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};","export class margin {\n    constructor(\n        public top: number = 0.0,\n        public right: number = 0.0,\n        public bottom: number = 0.0,\n        public left: number = 0.0,\n    ) {\n    }\n}\n\nexport class size {\n    constructor(\n        public width: number = 0.0,\n        public height: number = 0.0,\n    ) {\n    }\n}\n\nexport class PropData {\n    constructor(\n        // range of x, for example if your data start with 0 and\n        // end with 22.2 then, range will be [0, 22.2]\n        public range: number[] = [],\n        // interval_range is same as range but contains start and\n        // end points of every intervals.\n        // For example, if the interval range of each a : [0, 1], b : [1, 3]\n        // then, interval_range will be [0, 1, 3].\n        public interval_range: number[] = [],\n    ) {\n    }\n}","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass ModeRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#mode\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange, yrange, type, min, max) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n\n        if (yrange.length === 0){\n            return 0;\n        }\n        let uniqueNum = 0;\n        let sim = [];\n        for (let elem of yrange){\n            if (!sim.includes(elem)){\n                sim.push(elem);\n                uniqueNum += 1;\n            }\n        }\n\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"mode_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.modeCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#modeCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"modeCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        this.YscaleError = (max - min) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n\n        if (type == \"bool\"){\n            // set scale function for y\n            // 0: none, 1: false, 2: true, 3:none\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([0, 3])\n                    .range([this.data_viewer_height, 0]);\n        } else {\n            // set scale function for y\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([min - this.YscaleError, max + this.YscaleError])\n                    .range([this.data_viewer_height, 0]);\n        }\n\n        this.min = min;\n        this.max = max;\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.modeCanvasIntervalLines = this.modeCanvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasIntervalLines\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.modeCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.modeCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.modeCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        if(type === \"bool\"){\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n                (d) => {\n                    if (d === 1) {\n                        return \"false\"\n                    } else if (d === 2) {\n                        return \"true\"\n                    } else {\n                        return \" \"\n                    }\n                }));\n        }\n        else if(type === \"int\"){\n            let yRealRange = yrange.map((e) => {\n                return parseInt(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        } else if(type === \"real\"){\n            let yRealRange = yrange.map((e) => {\n                return parseFloat(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        }\n\n\n        // update when redraw, remove previous proposition graph.\n        this.modeGraph = this.modeCanvas\n            .selectAll(\"#modeLines\"+this._index)\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.modeLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let modeLineG = this.modeLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.modeGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return modeLineG(d);\n            })\n            .attr(\"id\", \"modeLines\"+this._index)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n    getXscale(){\n        return this.Xscale;\n    }\n\n    getYscale(){\n        return this.Yscale;\n    }\n\n\n\n}\n\nexport {ModeRenderer};","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass Renderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = ''\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#graph\" + this._index;\n        this._jd = _jd;\n        this.data_viewer_height = this._size.height - 20.0;\n    }\n\n\n    get graph() {\n        return this._graph;\n    }\n\n    set graph(graph) {\n        this._graph = graph;\n    }\n\n    clear() {\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n    }\n\n    loadGraph(maxX, maxY, l, xdata, pdata, vardict, modeSize, subXscale, subYscale) {\n        this.refData = l;\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n        d3.select(this._tag).selectAll(\"#main_svg_info\").remove();\n\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        let fps = d3.select(\"#graph span\");\n\n        let t0 = Date.now(), t1;\n\n        d3.timer(function () {\n\n            t1 = Date.now();\n            fps.text(Math.round(1000 / (t1 - t0)) + \" fps\");\n            t0 = t1;\n        });\n\n        // set data canvas\n        this.graphCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#graphCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"graphCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n        this.graphCanvasFront =\n            this.graphCanvas.append(\"g\");\n\n        // Color scale for line plot in dataCanvas.\n        // This will automatically add colors to your lines.\n        this.colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n\n\n        // Get original data's x's and y's extent.\n        // Will slow loading since json.data.xRange() itself need lots of calculations.\n        // Need to be removed soon.\n        this.dataXrange = maxX;\n        this.dataYrange = maxY;\n\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        let YscaleError = (this.dataYrange[1] - this.dataYrange[0]) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.dataCanvasXscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // Set scale function for y.\n        // This process will do the same thing as x.\n        this.dataCanvasYscale = d3.scaleLinear()\n            .domain([this.dataYrange[0] - YscaleError, this.dataYrange[1] + YscaleError])\n            .range([this.data_viewer_height, 0]);\n\n        this.dataCanvasXscaleZoom = this.dataCanvasXscale;\n        this.dataCanvasYscaleZoom = this.dataCanvasYscale;\n\n        // Add scaling function generators for x and y.\n        let make_y_grid = () => {\n            return d3.axisBottom(this.dataCanvasXscale);\n        };\n        let make_x_grid = () => {\n            return d3.axisLeft(this.dataCanvasYscale);\n        };\n\n        // Add this Grid xis first. If not, left y axis will overlap with grid axis.\n        this.graphCanvasXaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxisGrid\" + this._index)\n            .attr(\"class\", \"XaxisGrid\");\n\n        this.graphCanvasXaxisGrid.call(make_y_grid()\n            .tickSize(this._size.height)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        this.graphCanvasYaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxisGrid\" + this._index)\n            .attr(\"class\", \"YaxisGrid\");\n\n        // -this._size.width will mirroring the position.\n        this.graphCanvasYaxisGrid.call(make_x_grid()\n            .tickSize(-this._size.width)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        // Add clipping path.\n        // If you are adding clipping path without margin, your zero of your axis will get lost.\n        // Add x and y axis to dataCanvas.\n        this.graphCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(this.dataCanvasXscale));\n\n        this.graphCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\")\n            .call(d3.axisLeft(this.dataCanvasYscale));\n\n\n        // Add zoom function to dataCanvas\n        this.zoom = d3.zoom()\n            .extent([[0, 0], [this._size.width, this.data_viewer_height]])\n            .scaleExtent([1, Infinity])\n            .translateExtent([[0, -this.dataYrange[1]], [Infinity, Infinity]])\n            .on(\"zoom\", () => {\n\n                // Update scale functions to zoomed ones.\n                this.dataCanvasXscaleZoom = d3.event.transform.rescaleX(this.dataCanvasXscale);\n                this.dataCanvasYscaleZoom = d3.event.transform.rescaleY(this.dataCanvasYscale);\n\n                // Update axis.\n                this.graphCanvasXaxis.call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                this.graphCanvasYaxis.call(d3.axisLeft(this.dataCanvasYscaleZoom));\n\n                d3.selectAll(\"#propCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#propCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n                d3.selectAll(\"#modeCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#modeCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n\n                this.propCanvasYscale =\n                    d3.scaleLinear()\n                        .domain([0, 3])\n                        .range([60.0, 0]);\n\n\n                // Make new line scale functions using latest scale functions.\n                this.lineGenerator = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.dataCanvasYscaleZoom(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n                this.lineGenerator2 = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.propCanvasYscale(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n\n                d3.selectAll(\".propLines\")\n                    .attr(\"d\", (d) => {\n                        return this.lineGenerator2(d);\n                    });\n\n\n                // update mode variable scale\n                for(let i = 0; i < modeSize; i++){\n                    let lineG = d3.line()\n                        .x((d) => {\n                            return this.dataCanvasXscaleZoom(d[0]);\n                        })\n                        .y((d) => {\n                            return subYscale[i](d[1]);\n                        }).curve(d3.curveMonotoneX);\n\n                    d3.selectAll(\"#modeLines\"+i)\n                        .attr(\"d\", (d)=>{\n                            return lineG(d);\n                        })\n                }\n\n                // Update lines positions.\n                // Update position first and then rendering it\n                this.lineGraph.selectAll(\".lines\")\n                    .each((d) => {\n                        d.newX = this.lineGenerator(d.data);\n                    });\n\n                this.lineGraph.selectAll(\".lines\")\n                    .attr(\"d\", (d) => {\n                        return d.newX;\n                    });\n\n            });\n\n        this.tooltip = d3.select(this._tag)\n            .append(\"div\")\n            .attr(\"id\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"1px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"10px\");\n\n\n\n        this.drawGraph(l, xdata, vardict);\n\n    }\n\n\n    drawGraph(l, xdata, vardict) {\n\n        let color = d3.scaleOrdinal()\n            .domain(vardict)\n            .range(d3.schemeTableau10);\n\n        let newDataList = [];\n        let nameList = [];\n        for(let [k, v] of l){\n            let elem = {\n                name: k,\n                data: v\n            };\n            newDataList.push(elem);\n            nameList.push(k);\n        }\n        let infoHeight = nameList.length * 30;\n\n\n        this.InfoCanvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg_info\")\n            .attr(\"width\", this._size.width).attr(\"height\", infoHeight);\n\n        this.InfoCanvas.selectAll(\"dots\")\n            .data(nameList)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", 20)\n            .attr(\"cy\", (d, i) => {return 15 + i * 25})\n            .attr(\"r\", 7)\n            .style(\"fill\", (d)=> { return color(d) });\n\n\n        // Add one dot in the legend for each name.\n        this.InfoCanvas.selectAll(\"labels\")\n            .data(nameList)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", 40)\n            .attr(\"y\", function(d,i){ return 15 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n            .style(\"fill\", function(d){ return color(d)})\n            .text(function(d){ return d})\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\");\n\n\n\n        let dataCanvasXscale = this.dataCanvasXscale;\n        let dataCanvasYscale = this.dataCanvasYscale;\n        this.lineGenerator = d3.line()\n            .x(function (d) {\n                return dataCanvasXscale(d[0]);\n            })\n            .y(function (d) {\n                return dataCanvasYscale(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        // add line to dataCanvas front where clipping path is added.\n        this.lineGraph = this.graphCanvas\n            .selectAll(\".lines\")\n            .append(\"g\")\n            .data(newDataList)\n            .enter();\n\n        this.lineGraph.append(\"path\")\n            .attr(\"d\", (d) => {\n                return this.lineGenerator(d.data);\n            })\n            .attr(\"class\", \"lines\")\n            .attr(\"stroke\", (d, i) => {\n                return color(d.name);\n            })\n            .attr(\"stroke-width\", 1.5)\n            .style(\"fill\", \"none\");\n\n        this.lineGraph.append(\"text\")\n            .attr('id', 'focusText')\n            .attr(\"transform\", () => {\n                return \"translate(2,\" + (this._margin_viewer.top - 3) + \")\"\n            })\n            .style(\"font-size\", () => {\n                return \"11px\"\n            })\n            .style(\"visibility\", \"hidden\");\n\n\n        let bisectDate = d3.bisector((d) => {\n            return d;\n        }).left;\n\n        let lineGraph = this.lineGraph;\n        this.graphCanvasFront\n            .append(\"rect\")\n            .attr(\"id\", \"mainrect\")\n            .attr('width', this._size.width - this.x_clip_margin)\n            .attr('height', this.data_viewer_height)\n            .attr(\"transform\", \"translate(\" + 0 + \",\" + 1 + \")\")\n            //.attr(\"clip-path\", \"url(#dataCanvasClip)\")\n            .style(\"fill-opacity\", \"0.0\")\n            .on(\"mouseover\", () => {\n                if (this.popup) {\n                    //tooltip.style(\"visibility\", \"visible\");\n                }\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"visible\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"visible\");\n            })\n            .on(\"mouseout\", function () {\n                //tooltip.style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"hidden\");\n            })\n            .on(\"mousemove\", () => {\n\n                // Get current mouse position.\n                let mouse = d3.mouse($(\"#graphCanvas\" + this._index)[0]);\n                let pos = this.dataCanvasXscaleZoom.invert(mouse[0]);\n\n                let bisectPos = bisectDate(xdata, pos);\n                if (bisectPos > 0 && xdata.length - 1 >= bisectPos) {\n                }\n            })\n            .call(this.zoom);\n    }\n\n}\n\nexport {Renderer};","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass PropositionRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#proposition\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"prop_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.propCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#propCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // set scale function for y\n        // 0: none, 1: false, 2: true, 3:none\n        this.Yscale =\n            d3.scaleLinear()\n                .domain([0, 3])\n                .range([this.data_viewer_height, 0]);\n\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"propCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.propCanvasIntervalLines = this.propCanvas.append(\"g\")\n            .attr(\"id\", \"propCanvasIntervalLines\")\n            //.attr(\"transform\", \"translate(\" + 0 + \",\" + (-50) + \")\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.propCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.propCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.propCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        this.propCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n            (d) => {\n                if (d === 1) {\n                    return \"false\"\n                } else if (d === 2) {\n                    return \"true\"\n                } else {\n                    return \" \"\n                }\n            }));\n\n        // update when redraw, remove previous proposition graph.\n        this.propGraph = this.propCanvas\n            .selectAll(\".propLines\")\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.propLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let propLineG = this.propLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.propGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return propLineG(d);\n            })\n            .attr(\"class\", \"propLines\")\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n}\n\nexport {PropositionRenderer};","/**\n * Basic wrapper class for *visualize* **project**.\n * This class uses MathModel's objects and this class is extremely specific\n * to certain project. Do not reuse this class. This is just wrapper class!\n *\n * Written by Geunyeol Ryu\n * @ 2019.06.22\n */\n\n/**\n * Packages.\n */\n\nexport interface Proposition {\n    name: string;\n    actual: string;\n    data: [number, number][][];\n}\n\nexport interface IntervalInfo {\n    intIndex: number;\n    range: number[];\n    data: number[];\n}\n\nexport interface Mode {\n    name: string;\n    type: string;\n    actual: string[];\n    data: [number, number][][];\n    min: number;\n    max: number;\n    originalData: string[];\n}\n\nexport interface Interval {\n    name: string;\n    points: [number, number][][];\n}\n\nexport interface Interval4List {\n    index: number;\n    interval: Interval[];\n}\n\nclass Json {\n    /**\n     * Internally has intervals.\n     */\n\n    // intervals map needs to be different of each graphs.\n    // you will have many different graphs..\n    private _intervalsMap: Map<number, Map<number, Interval[]>> = new Map<number, Map<number, Interval[]>>();\n    private _intervalVarMap: Map<number, string[]> = new Map<number, string[]>();\n    private _dataByNameMap: Map<number, Map<string, [number, number][]>> = new Map<number, Map<string, [number, number][]>>();\n\n    private _xRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _yRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _graph_size: number = 0;\n\n    private maxX: number = 0.0;\n    private minX: number = 0.0;\n    private totalMaxX: number = 0.0;\n    private totalMinX: number = 0.0;\n    private _isEmpty: Boolean = true;\n    private _var_list: string[] = [];\n    private _x_data_list: number[] = [];\n\n    private _interval_flat_list: number[] = [];\n    // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n    private _interval_info: Map<number, IntervalInfo> = new Map<number, IntervalInfo>();\n    // i'th graph with auto interval and proposition\n    private _propMap: Map<number, Proposition> = new Map<number, Proposition>();\n    private _modeMap: Map<number, Mode> = new Map<number, Mode>();\n\n    /**\n     *\n     * @param _jsonString String parsing by internal json parser to string.\n     */\n    constructor(\n        private _jsonString: string = \"\"\n    ) {\n        //...\n    }\n\n    xRange(index: number): ([number, number] | undefined) {\n        return this._xRangeMap.get(index);\n    }\n\n    yRange(index: number): ([number, number] | undefined) {\n        return this._yRangeMap.get(index);\n    }\n\n    get variables() {\n        return this._var_list;\n    }\n\n    get xlist() {\n        return this._x_data_list;\n    }\n\n    // graph with number, each number is interval...\n    GetGraph(index: number): (Map<number, Interval[]> | undefined) {\n        return this._intervalsMap.get(index)\n    }\n\n    // graph with number, each number is interval...\n    GetGraph2List(index: number): (Interval4List[]) {\n        let res = [];\n        for (let i = 0; i < this._intervalsMap.size; i++){\n            let intv = this._intervalsMap.get(index);\n            if (intv){\n                let intvElem = intv.get(i);\n                if (intvElem){\n                    let newI = {\n                        index: i,\n                        interval: intvElem,\n                    };\n                    res.push(newI);\n                }\n            }\n        }\n        return res;\n    }\n\n    GetVar(index:number): (string[] | undefined) {\n        return this._intervalVarMap.get(index);\n    }\n\n    GetGraphSize(): number {\n        return this._graph_size;\n    }\n\n    GetIntervalSize(): number {\n        return this._intervalsMap.size;\n    }\n\n    GetIntervalInfo(index: number) {\n        return this._interval_info.get(index);\n    }\n\n    GetDataByName(index: number){\n        return this._dataByNameMap.get(index);\n    }\n\n    GetModeSize() {\n        return this._modeMap.size;\n    }\n\n    GetMode(index: number) {\n        return this._modeMap.get(index);\n    }\n\n\n    GetIntervalInfoFlat() {\n        return this._interval_flat_list;\n    }\n\n    get varMap(){\n        return this._intervalVarMap;\n    }\n\n    get map() {\n        return this._intervalsMap;\n    }\n\n    get modeMap() {\n        return this._modeMap;\n    }\n\n    // Get data list related to intervals from map structure.\n    GetProp(index: number) {\n        return this._propMap.get(index);\n    }\n\n    get propMap() {\n        return this._propMap;\n    }\n\n    get propSize() {\n        return this._propMap.size;\n    }\n\n\n    get MaxX() {\n        return this.maxX;\n    }\n\n    get MinX() {\n        return this.minX;\n    }\n\n    get TotalMaxX() {\n        return this.totalMaxX;\n    }\n\n    get TotalMinX() {\n        return this.totalMinX;\n    }\n\n    IsInList(l:string[], elem:string){\n        for(let e of l){\n            if(e == elem){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    clearAll() {\n        this._intervalsMap.clear();\n        this._intervalVarMap.clear();\n        this._dataByNameMap.clear();\n        this._xRangeMap.clear();\n        this._yRangeMap.clear();\n        this._graph_size = 0;\n\n        this.maxX = 0.0;\n        this.minX = 0.0;\n        this.totalMaxX = 0.0;\n        this.totalMinX = 0.0;\n        this._isEmpty = true;\n        this._var_list = [];\n        this._x_data_list = [];\n\n        this._interval_flat_list = [];\n        // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n        this._interval_info.clear();\n        // i'th graph with auto interval and proposition\n        this._propMap.clear();\n        this._modeMap.clear();\n    }\n\n    /**\n     * @params jsonString Simple string that looks like Json file.\n     */\n    set string(jsonString: string) {\n        this.clearAll();\n        this._jsonString = jsonString;\n        this.parse();\n    }\n\n    isEmpty(): Boolean {\n        return this._isEmpty;\n    }\n\n    /**\n     * Parsing interanl jsonString to make object.\n     */\n    parse = () => {\n        if (this._jsonString != \"\") {\n            // clear all element in intervals list.\n            this.clearAll();\n            this._isEmpty = false;\n            // https://dmitripavlutin.com/how-to-iterate-easily-over-object-properties-in-javascript/\n            // need to take both key and value.\n            let [variable, interval, dataByName, prop, mode, xdata, intervalInfo, full_interval_range] = Object.values(this._jsonString);\n            this._interval_flat_list = Object.values(full_interval_range).map((e) => {\n                return parseFloat(e);\n            });\n\n            // get interval info\n            for (let [okey, ovalue] of Object.entries(intervalInfo)) {\n                let [interval_index, interval_range, interval_data] = Object.values(ovalue);\n                let tmp: IntervalInfo = {\n                    intIndex: parseInt(interval_index),\n                    range: Object.values(interval_range).map((e) => {\n                        return parseFloat(e)\n                    }),\n                    data: Object.values(interval_data).map((e) => {\n                        return parseFloat(e)\n                    }),\n                };\n                this._interval_info.set(parseInt(interval_index), tmp);\n            }\n\n\n            // get mode\n            let counter_mode = 0;\n            for (let [okey, ovalue] of Object.entries(mode)) {\n                let [mode_name, mode_type, mode_data] = Object.values(ovalue);\n                let data = Object.values(mode_data);\n\n                let intv_data_set: [number, number][][] = [];\n                let min = 0.0;\n                let max = 0.0;\n                for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                    let numnumlist: [number, number][] = [];\n                    let iifg = this._interval_info.get(ii2);\n                    if (iifg) {\n                        // Todo: not right....\n                        if (mode_type == \"bool\"){\n                            max = 3;\n                            numnumlist = iifg.data.map((e) => {\n                                return data[ii2] == \"True\" ? [e, 2] : [e, 1];\n                            });\n                        } else if (mode_type == \"int\") {\n                            numnumlist = iifg.data.map((e) => {\n                                let yy = parseInt(data[ii2]);\n                                if (yy < min){\n                                    min = yy;\n                                }\n                                if (yy > max){\n                                    max = yy;\n                                }\n                                return [e, yy];\n                            });\n                        } else if (mode_type == \"real\") {\n                            numnumlist = iifg.data.map((e) => {\n                                let yy = parseFloat(data[ii2]);\n                                if (yy < min){\n                                    min = yy;\n                                }\n                                if (yy > max){\n                                    max = yy;\n                                }\n                                return [e, yy];\n                            });\n                        }\n                        // Todo update it.\n                    }\n                    intv_data_set.push(numnumlist);\n                }\n\n                let tmp_mode: Mode = {\n                    name: mode_name,\n                    type: mode_type,\n                    actual: data,\n                    data: intv_data_set,\n                    min: min,\n                    max: max,\n                    originalData: data,\n                };\n                this._modeMap.set(counter_mode, tmp_mode);\n                counter_mode++;\n            }\n\n            // get proposition\n            let counter = 0;\n            for (let [okey, ovalue] of Object.entries(prop)) {\n                let [prop_name, prop_actual, prop_data] = Object.values(ovalue);\n                let data = Object.values(prop_data);\n\n                let intv_data_set: [number, number][][] = [];\n                for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                    let numnumlist: [number, number][] = [];\n                    let iifg = this._interval_info.get(ii2);\n                    if (iifg) {\n                        numnumlist = iifg.data.map((e) => {\n                            return data[ii2] == \"True\" ? [e, 2] : [e, 1];\n                        });\n                    }\n                    intv_data_set.push(numnumlist);\n                }\n                let tmp_prop: Proposition = {\n                    name: prop_name,\n                    actual: prop_actual,\n                    data: intv_data_set,\n                };\n                this._propMap.set(counter, tmp_prop);\n                counter++;\n            }\n\n            this._var_list = Object.values(variable);\n            this._x_data_list = Object.values(xdata).map((s: string) => {\n                return parseFloat(s)\n            });\n            this._graph_size = interval.length;\n\n\n            // iterate through multiple sets of graphs.\n            for (let i = 0; i < interval.length; i++) {\n                let [index, graph, range] = Object.values(interval[i]);\n\n\n                let tmp = new Map<number, Interval[]>();\n                let varList: string[] = [];\n                for (let [k, v] of Object.entries(graph)) {\n                    let [name, intIndex, points] = Object.values(v);\n                    let intIndexInt = parseInt(intIndex);\n                    let intervals: Interval = {\n                        name: \"\",\n                        points: []\n                    };\n\n                    let tmp_interval: [number, number][] = [];\n                    if (!this.IsInList(varList, name)){\n                        varList.push(name);\n                    }\n\n                    for (let pv of points) {\n                        let [x, y] = Object.values(pv);\n                        tmp_interval.push([parseFloat(x), parseFloat(y)]);\n                    }\n                    intervals.name = name;\n                    intervals.points.push(tmp_interval);\n\n                    // check if is in list\n                    let getFromGraph = tmp.get(intIndexInt);\n\n                    // if exists\n                    if(getFromGraph){\n                        getFromGraph.push(intervals);\n                        tmp.set(intIndexInt, getFromGraph);\n                    } else {\n                        let elem = [];\n                        elem.push(intervals);\n                        tmp.set(intIndexInt, elem);\n                    }\n\n                }\n\n                this._intervalVarMap.set(parseInt(index), varList);\n                this._intervalsMap.set(parseInt(index), tmp);\n\n\n                let [maxX, minX, maxY, minY, m, m1, m2, m3] = Object.values(range);\n\n                this.maxX = parseFloat(maxX);\n                this.minX = parseFloat(minX);\n\n                this._xRangeMap.set(parseInt(index), [parseFloat(minX), parseFloat(maxX)]);\n                this._yRangeMap.set(parseInt(index), [parseFloat(minY), parseFloat(maxY)]);\n\n                //this._intervalsMap.set(parseInt(index), intervals);\n                if (i == 0) {\n                    this.totalMinX = parseFloat(minX);\n                    this.totalMaxX = parseFloat(maxX);\n                }\n            }\n\n            // get data by variable name\n            for (let i = 0; i < dataByName.length; i++) {\n                let [index, graph] = Object.values(dataByName[i]);\n                let intIndex = parseInt(index);\n\n\n                let tmp = new Map<string, [number, number][]>();\n                for (let [k, v] of Object.entries(graph)) {\n                    let [name, points] = Object.values(v);\n                    let tmp_data:[number, number][] = [];\n\n                    for (let pv of points) {\n                        let [x, y] = Object.values(pv);\n                        tmp_data.push([parseFloat(x), parseFloat(y)]);\n                    }\n                    tmp.set(name, tmp_data)\n                }\n\n                this._dataByNameMap.set(intIndex, tmp);\n\n            }\n        } else {\n            this._isEmpty = true;\n        }\n    };\n}\n\nexport {Json};","import React from 'react';\nimport lineplotStyle from './style/LinePlot.module.scss';\nimport styleVariable from './style/variable.module.scss';\nimport './style/LinePlotStyle.scss';\nimport '../../Style/scss/main.scss';\nimport {margin, PropData, size} from '../Core/Util/Util';\nimport {ModeRenderer} from '../Core/Renderer/ModeRenderer';\nimport {Renderer} from '../Core/Renderer/MainRenderer';\nimport {PropositionRenderer} from '../Core/Renderer/PropositionRenderer';\nimport {Json, Mode, Proposition} from '../Core/Util/DataParser';\nimport Select from 'react-select';\nimport {ActionMeta, ValueType} from 'react-select/src/types';\nimport \"react-tabs/style/react-tabs.css\";\nimport Axios, {AxiosInstance} from \"axios\";\nimport {Button, Form, Modal, Spinner} from 'react-bootstrap';\nimport $ from 'jquery';\nimport {ModeState, PropState} from \"../Core/Data\";\n\n\n/*\n * Props and State\n */\ninterface Props {\n    url: string;\n}\n\n\ninterface WorkspaceData {\n    title: string;\n    uid: number;\n}\n\ninterface ServerError {\n    message: string;\n    error: boolean;\n}\n\n\n// State contains many useful\ninterface State {\n    model: WorkspaceData[];\n    isOptionAlive: boolean;\n    selectedValue: string;\n    propState: PropState;\n    modeState: ModeState;\n\n    isCounterExm: boolean;\n\n    graphNum: number;\n\n    xlist: number[];\n    toggle: Map<number, boolean>;\n\n    isToggleChanged: boolean;\n\n    serverError: ServerError;\n    isShutDown: boolean;\n    isLoadingReset: boolean;\n}\n\n/*\n * LinePlot Component\n * no longer need constructors\n * https://medium.com/@martin_hotell/react-typescript-and-defaultprops-dilemma-ca7f81c661c7\n */\nclass LinePlot extends React.Component<Props, State> {\n\n    private width: number = parseFloat(styleVariable.width.replace(\"px\", \"\"));\n    private height: number = parseFloat(styleVariable.height.replace(\"px\", \"\"));\n\n    private margin_viewer_top: number = parseFloat(styleVariable.margin_viewer_top.replace(\"px\", \"\"));\n    private margin_viewer_right: number = parseFloat(styleVariable.margin_viewer_right.replace(\"px\", \"\"));\n    private margin_viewer_bottom: number = parseFloat(styleVariable.margin_viewer_bottom.replace(\"px\", \"\"));\n    private margin_viewer_left: number = parseFloat(styleVariable.margin_viewer_left.replace(\"px\", \"\"));\n\n\n    private renderers: Renderer[] = [];\n    private propRenderers: PropositionRenderer[] = [];\n    private modeRenderers: ModeRenderer[] = [];\n    private instance: AxiosInstance;\n\n    private njson = new Json();\n\n    private base_margin = new margin(\n        this.margin_viewer_top,\n        this.margin_viewer_right,\n        this.margin_viewer_bottom,\n        this.margin_viewer_left\n    );\n\n\n    state: State = {\n        isCounterExm: false,\n        selectedValue: \"\",\n        isOptionAlive: false,\n        graphNum: 0,\n        model: [],\n\n\n        propState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            propRenderers: [],\n            propMap: new Map<number, Proposition>(),\n            propData: new PropData(),\n        },\n\n        modeState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            modeMap: new Map<number, Mode>(),\n        },\n\n        toggle: new Map<number, boolean>(),\n        isToggleChanged: false,\n        xlist: [],\n        serverError: {\n            message: \"\",\n            error: false,\n        },\n        isShutDown: false,\n        isLoadingReset: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        // Set config defaults when creating the instance\n        this.onModelListSelect = this.onModelListSelect.bind(this);\n        this.onResetButtonClick = this.onResetButtonClick.bind(this);\n        this.onOffButtonClick = this.onOffButtonClick.bind(this);\n        this.instance = Axios.create({baseURL: this.props.url});\n        this.Item = this.Item.bind(this);\n        this.ItemList = this.ItemList.bind(this);\n        this.Main = this.Main.bind(this);\n        this.ShutDown = this.ShutDown.bind(this);\n        this.LoadingBtn = this.LoadingBtn.bind(this);\n    }\n\n    async componentDidMount() {\n        // get file_list\n        await this.instance.get(`/file_list`)\n            .catch((error) => {\n                console.log(error);\n                this.setState({\n                    serverError: {\n                        error: true,\n                        message: error,\n                    }\n                })\n            }).then((response) => {\n                if (response) {\n                    this.setState({\n                        model:\n                            response.data.file_list.map((v: string) => {\n                                let [title, uid] = Object.values(v);\n                                let workspace: WorkspaceData = {\n                                    title: title,\n                                    uid: parseInt(uid),\n                                };\n                                return workspace;\n                            }),\n                    })\n                }\n            })\n\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (this.state.serverError.error) {\n            this.setState({\n                serverError: {\n                    error: false,\n                    message: \"\",\n                }\n            });\n        }\n\n        if (!this.njson.isEmpty()) {\n            let modeRenderersXScale = [];\n            let modeRenderersYScale = [];\n            for (let e = 0; e < this.njson.GetModeSize(); e++) {\n                let d = this.njson.GetMode(e);\n                if (d) {\n                    this.modeRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat(), d.originalData, d.type, d.min, d.max);\n                    modeRenderersXScale.push(this.modeRenderers[e].getXscale());\n                    modeRenderersYScale.push(this.modeRenderers[e].getYscale());\n                }\n\n            }\n            for (let e = 0; e < this.renderers.length; e++) {\n                let eGraph: (Map<string, [number, number][]> | undefined) = this.njson.GetDataByName(e);\n                if (eGraph) {\n                    // vardict should always exist or undefined error would occur!\n                    this.renderers[e].loadGraph(this.njson.xRange(e), this.njson.yRange(e), eGraph, this.state.xlist, this.njson.GetIntervalInfoFlat(), this.njson.variables, this.njson.GetModeSize(), modeRenderersXScale, modeRenderersYScale);\n                }\n            }\n\n\n            for (let e = 0; e < this.njson.propSize; e++) {\n                let d = this.njson.GetProp(e);\n                if (d) {\n                    this.propRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat());\n                }\n\n            }\n        } else {\n            for (let e = 0; e < this.renderers.length; e++) {\n                this.renderers[e].clear();\n            }\n            this.renderers = [];\n\n\n            for (let e = 0; e < this.propRenderers.length; e++) {\n                this.propRenderers[e].clear();\n            }\n            this.propRenderers = [];\n\n            for (let e = 0; e < this.modeRenderers.length; e++) {\n                this.modeRenderers[e].clear();\n            }\n            this.modeRenderers = [];\n        }\n\n    }\n\n    // call every other event on this action.\n    async onModelListSelect(value2: ValueType<{ value: string; label: string; }>, actionMeta: ActionMeta) {\n\n        let titleVal = (value2 as { value: string; label: string; })[\"value\"];\n        console.log(titleVal);\n        let ws = this.state.model.find((value, index) => value.title == titleVal);\n\n        // if id exists.\n        if (ws != undefined) {\n            let response = await this.instance.get(\"/file/\" + ws.uid);\n            // if no data is coming from server ...\n            if (response.data != \"\") {\n                this.njson.string = response.data;\n                let gs = this.njson.GetGraphSize();\n                this.renderers = [];\n                let isRedBool = new Map<number, boolean>();\n\n                let width = $(window).width();\n                if (width){\n                    width = width * 0.8 - this.base_margin.left - this.base_margin.right;\n                }\n                let newSize = new size(\n                    width,\n                    80.0\n                );\n\n                for (let e = 0; e < gs; e++) {\n                    let red = new Renderer(\n                        new size(\n                            width,\n                            this.height\n                        ), this.base_margin, e\n                    );\n                    red.graph = this.njson.GetGraph(e);\n                    this.renderers.push(red);\n                    isRedBool.set(e, true);\n                }\n\n                let isBoolean = new Map<number, boolean>();\n                this.propRenderers = [];\n                for (let e = 0; e < this.njson.propSize; e++) {\n                    let tmp_prop = new PropositionRenderer(\n                        newSize, this.base_margin, e\n                    );\n                    this.propRenderers.push(tmp_prop);\n                    isBoolean.set(e, true);\n                }\n                ;\n\n                let modeIsBoolean = new Map<number, boolean>();\n                this.modeRenderers = [];\n                for (let e = 0; e < this.njson.GetModeSize(); e++) {\n                    let md = new ModeRenderer(\n                        newSize, this.base_margin, e\n                    );\n                    this.modeRenderers.push(md);\n                    modeIsBoolean.set(e, true);\n                }\n\n                // get reloaded new variables.\n                for (let i = 0; i < this.njson.GetGraphSize() + this.njson.propSize; i++) {\n                    this.state.toggle.set(i, true);\n                }\n\n                this.setState({\n                    selectedValue: titleVal,\n                    isOptionAlive: true,\n                    isCounterExm: true,\n                    toggle: isRedBool,\n                    graphNum: this.njson.GetGraphSize(),\n                    xlist: this.njson.xlist,\n                    propState: {\n                        numOfGraph: this.njson.propSize,\n                        propData: {\n                            range: [this.njson.TotalMinX, this.njson.TotalMaxX],\n                            interval_range: this.njson.GetIntervalInfoFlat(),\n                        },\n                        propRenderers: this.propRenderers,\n                        propMap: this.njson.propMap,\n                        isEnabled: isBoolean,\n                    },\n                    modeState: {\n                        numOfGraph: this.njson.GetModeSize(),\n                        modeMap: this.njson.modeMap,\n                        isEnabled: modeIsBoolean,\n                    }\n                });\n            } else {\n\n                this.njson.clearAll();\n\n                this.setState({\n                    isCounterExm: false,\n                });\n            }\n        }\n    }\n\n    async onOffButtonClick() {\n        let response = await this.instance.get(`/shutdown`);\n        if (response.data == \"Shutdown called\"){\n            console.log(\"server shutdown.. you need to restart server for progress!\");\n            this.setState({isShutDown: true,});\n        }\n    }\n\n    async onResetButtonClick() {\n        this.setState({isLoadingReset: true});\n        let response = await this.instance.get(`/file_list`);\n        this.njson.clearAll();\n        this.setState({\n            isOptionAlive: false,\n            isCounterExm: false,\n            model:\n                response.data.file_list.map((v: string) => {\n                    let [title, uid] = Object.values(v);\n                    let workspace: WorkspaceData = {\n                        title: title,\n                        uid: parseInt(uid),\n                    };\n                    return workspace;\n                }),\n            isLoadingReset: false,\n        });\n\n    }\n\n\n    Item(index: number, margin: number|undefined) {\n        let vars = this.njson.GetVar(index);\n        let isEnabled = this.state.toggle.get(index);\n        let label = \"unknown\";\n        if(vars){\n            label = \"Var: \";\n            for (let i = 0; i < vars.length; i++){\n                if (i==0)\n                    label += vars[i];\n                else\n                    label += (\", \"+vars[i]);\n            }\n        }\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    checked={isEnabled}\n                    onClick={() => {\n                        let newIsEnabled = this.state.toggle;\n                        if (isEnabled) {\n                            newIsEnabled.set(index, false)\n                            this.setState({\n                                toggle: newIsEnabled,\n                            });\n\n                        } else {\n                            newIsEnabled.set(index, true)\n                            this.setState({\n                                toggle: newIsEnabled,\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div id={\"graph\" + index} style={{display: this.state.toggle.get(index) ? 'block' : 'none'}}>\n                        <span></span>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    PropUI(index: number, margin: number|undefined) {\n        let prop = this.state.propState.propMap.get(index);\n        let isEnabled = this.state.propState.isEnabled.get(index);\n        let label = \"unknown\";\n        if (prop) {\n            label = prop.name + \" : \" + prop.actual;\n        }\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    checked={isEnabled}\n                    onClick={() => {\n                        let newIsEnabled = this.state.propState.isEnabled;\n                        if (isEnabled) {\n                            newIsEnabled.set(index, false);\n                            this.setState({\n                                    propState: {\n                                        numOfGraph: this.state.propState.numOfGraph,\n                                        propMap: this.state.propState.propMap,\n                                        isEnabled: this.state.propState.isEnabled,\n                                        propData: this.state.propState.propData,\n                                        propRenderers: this.state.propState.propRenderers,\n                                    }\n                                }\n                            );\n                        } else {\n                            newIsEnabled.set(index, true);\n                            this.setState({\n                                propState: {\n                                    numOfGraph: this.state.propState.numOfGraph,\n                                    propMap: this.state.propState.propMap,\n                                    isEnabled: this.state.propState.isEnabled,\n                                    propData: this.state.propState.propData,\n                                    propRenderers: this.state.propState.propRenderers,\n                                }\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div className=\"svg_div\" id={\"proposition\" + index}\n                         style={{display: this.state.propState.isEnabled.get(index) ? 'block' : 'none'}}>\n                        <span></span>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    ModeUI(index: number, margin: number|undefined) {\n\n        let label = \"unknown\";\n        let mod = this.state.modeState.modeMap.get(index);\n        if (mod) {\n            label = mod.name + \" = \" + mod.actual\n        }\n        let isBool = this.state.modeState.isEnabled.get(index);\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    checked={isBool}\n                    onClick={() => {\n                        let newIs = this.state.modeState.isEnabled;\n                        if (isBool) {\n                            newIs.set(index, false);\n                            this.setState({\n                                modeState: {\n                                    isEnabled: newIs,\n                                    modeMap: this.state.modeState.modeMap,\n                                    numOfGraph: this.state.modeState.numOfGraph,\n                                }\n                            });\n\n                        } else {\n                            newIs.set(index, true);\n                            this.setState({\n                                modeState: {\n                                    isEnabled: newIs,\n                                    modeMap: this.state.modeState.modeMap,\n                                    numOfGraph: this.state.modeState.numOfGraph,\n                                }\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div className=\"svg_div\" id={\"mode\" + index}\n                         style={{display: this.state.modeState.isEnabled.get(index) ? 'block' : 'none'}}>\n                        <span></span>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    ItemList() {\n        let res = [];\n        let res2 = [];\n        let res3 = [];\n        let margin = $(window).width();\n        if (margin){\n            margin = margin * 0.1 + this.base_margin.left;\n        }\n\n        for (let i = 0; i < this.state.graphNum; i++) {\n            res.push(this.Item(i, margin));\n        }\n        for (let i = 0; i < this.njson.propSize; i++) {\n            res2.push(this.PropUI(i, margin));\n        }\n\n        for (let i = 0; i < this.njson.GetModeSize(); i++) {\n            res3.push(this.ModeUI(i, margin));\n        }\n        return (\n            <Form>\n                {res3}\n                {res}\n                {res2}\n            </Form>\n        )\n\n    }\n\n    Main() {\n        return (\n            <div>\n                {!this.njson.isEmpty() ? (\n                    <div>\n                        <div className=\"row basic_box\">\n                            <div className=\"col-md-12\">\n                                <this.ItemList/>\n                            </div>\n                        </div>\n                    </div>) : (\n                    <div className=\"row line_plot_div\">\n                        <div className=\"col-md-1\"/>\n                        <div className=\"col-md-10 alert alert-warning\" role=\"alert\">\n                            No counter example, nothing to show!\n                        </div>\n                        <div className=\"col-md-1\"/>\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n    ShutDown(){\n        return (\n            <Modal\n                show={this.state.isShutDown}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                keyboard={false}\n                backdrop={'static'}\n            >\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Visualize Server shutdown\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        Visualize server has been successfully shutdowned. Restart the server to use visualization.\n                    </p>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    LoadingBtn(){\n        return(\n            <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n            />\n        )\n    }\n\n    render() {\n        let selected = this.state.selectedValue;\n        let select = this.state.isOptionAlive ? {value: selected, label: selected} : null;\n        // TODO: Update precision of graph after update.\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-11\"/>\n                    <div className=\"col-md-1\">\n                        <Button variant=\"outline-danger\" onClick={this.onOffButtonClick} id=\"non-outline\">off</Button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-1\"/>\n                    <div className=\"col-md-10\">\n                        <label>Models</label>\n                        <Select isSearchable={true} value={select} options={this.state.model.map(\n                            (v) => {\n                                return ({value: v.title, label: v.title});\n                            }\n                        )} onChange={this.onModelListSelect} />\n                    </div>\n                    <div className=\"col-md-1\">\n                    </div>\n                </div>\n                <div className=\"row items-7\">\n                    <div className=\"col-md-10\"/>\n                    <div className=\"col-md-1 text-right\">\n                        <Button variant=\"outline-dark\" onClick={this.onResetButtonClick} id=\"non-outline\">\n                            {this.state.isLoadingReset ? <this.LoadingBtn/> : \"reset\"}\n                        </Button>\n                    </div>\n                    <div className=\"col-md-1\"/>\n                </div>\n                {this.state.isShutDown ? <this.ShutDown/> : <this.Main/>}\n            </div>);\n    }\n}\n\nexport default LinePlot;\n","import React from 'react';\nimport './App.css';\nimport './Style/scss/main.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LinePlot from './Component/LinePlot/LinePlot';\n\n\nconst App: React.FC = () => {\n  let option = require('./.option.json');\n  console.log(option.url);\n  return (\n    <div className=\"main-container\"><LinePlot url={option.url}/></div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets2222; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};"],"sourceRoot":""}